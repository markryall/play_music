#!/usr/bin/env ruby

require 'optparse'
require_relative 'preferences'
require_relative 'simple_scrobbler'

artist = nil
release = nil
side = nil

OptionParser.new do |opts|
  opts.banner = "Usage: play_vinyl [options]"

  opts.on("-a", "--artist [ALBUM]", "Album name") do |v|
    artist = v
  end

  opts.on("-r", "--release [RELEASE]", "Release") do |v|
    release = v
  end

  opts.on("-s", "--side [SIDE]", "Side") do |v|
    side = v
  end
end.parse!

unless artist && release && side
  puts "please specify artist, release and side"
  exit 1
end

vinyl = Preferences.new '~/.vinyl.yml'
vinyl[artist] = {} unless vinyl[artist]
vinyl[artist][release] = {} unless vinyl[artist][release]
vinyl[artist][release][side] = [] unless vinyl[artist][release][side]

if vinyl[artist][release][side].empty?
  tracks = []
  track_number = 1
  loop do
    print "Enter the name of track #{track_number} (blank if no more tracks) "
    track_name = gets.chomp
    break if track_name.length == 0
    print "Enter duration of #{track_name} (minutes:seconds) "
    minutes, seconds = *gets.chomp.split(":").map { |number| number.to_i }
    duration = minutes * 60 + seconds
    track_number += 1
    tracks << {
      name: track_name,
      duration: duration
    }
  end
  vinyl[artist][release][side] = tracks
  vinyl.persist
end

tracks = vinyl[artist][release][side]
scrobbler = SimpleScrobbler.load

LENGTH = 50

def description(base, remaining)
  mins, secs = remaining / 60, remaining % 60
  "#{base} #{mins.to_s.rjust(3, '0')}:#{secs.to_s.rjust(2, '0')}"
end

tracks.each_with_index do |track, index|
  start_time = Time.now.to_i

  track_number = index + 1
  track_name = track[:name]
  duration = track[:duration]

  artist_length = 30
  track_length = 40

  base = [
    track_number.to_s.rjust(2, '0'),
    artist.slice(0...artist_length).ljust(artist_length),
    track_name.slice(0...track_length).ljust(track_length),
  ].join(' ')

  reset = "\b" * (base.length + 7)

  print description(base, duration)
  print reset

  while true
    scrobbler.now_playing artist, track_name, album: release, duration: duration

    sleep 1

    elapsed = Time.now.to_i - start_time
    remaining = duration - elapsed
    remaining = 0 if remainined < 0

    print description(base, remaining)
    print reset

    break if remaining == 0
  end

  scrobbler.scrobble artist, track_name, album: release, duration: duration, timestamp: start_time

  puts
end
